React components that will/might be used:
- render

A component is a function (i.e. a method in java), so each class in the UML is broken down into its functions. This is defined as such example: 
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
or 
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
where props is a single object aregyement with data, which is read only.

Elements can also represent user-defined components,
e.g.: const element = <Welcome name="Sara" />;
where it passes JSX attributes to this component as a single object (props).

i.e.
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

const element = <Welcome name="Sara" />;
ReactDOM.render(
  element,
  document.getElementById('root')
);


It is often useful to seperate render components into 'containers' (i.e. the <div> </div> and <h1> </h1> you have seen in javascript and typescript. This is so that all your sections are ordered and can have a heirarchy of how they are viewed and placed in the webApp/app. It is nicer to have smaller containers and components (which can be nested...) so that they are specific in use and not a whole chunk of data and functions.
e.g.
function Comment(props) {
  return (
    <div className="Comment">
      <div className="UserInfo">
        <img className="Avatar"
          src={props.author.avatarUrl}
          alt={props.author.name}
        />
        <div className="UserInfo-name">
          {props.author.name}
        </div>
      </div>
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}
It accepts author(object), text (string),and date as props, and describes a comment on a website. but you would rather have each component seperate as it is too nested and each section doesn't need to know what the other is doing.
so you would rather this:
function Avatar(props) {
  return (
    <img className="Avatar"
      src={props.user.avatarUrl}
      alt={props.user.name}
    />

  );
}
function UserInfo(props) {
  return (
    <div className="UserInfo">
      <Avatar user={props.user} />
      <div className="UserInfo-name">
        {props.user.name}
      </div>
    </div>
  );
}
function Comment(props) {
  return (
    <div className="Comment">
      <UserInfo user={props.author} />
      <div className="Comment-text">
        {props.text}
      </div>
      <div className="Comment-date">
        {formatDate(props.date)}
      </div>
    </div>
  );
}